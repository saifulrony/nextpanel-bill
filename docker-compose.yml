version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: billing-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-billing}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing-network

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: billing-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - billing-network

  # FastAPI Backend
  backend:
    build:
      context: ./billing-backend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: billing-backend
    env_file:
      - .env
    environment:
      DATABASE_URL: sqlite+aiosqlite:///./billing.db
      REDIS_URL: redis://redis:6379/0
      CORS_ALLOWED_HOSTS: ${HOST_IP:-192.168.10.203}
    volumes:
      - ./billing-backend:/app
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8001}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - billing-network
    restart: unless-stopped

  # Next.js Frontend
  frontend:
    build:
      context: ./billing-frontend
      dockerfile: Dockerfile
      target: ${BUILD_TARGET:-development}
    container_name: billing-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://${HOST_IP:-192.168.10.203}:8001
      NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      NEXT_PUBLIC_APP_NAME: ${APP_NAME:-NextPanel Billing}
      NEXT_PUBLIC_APP_URL: http://${HOST_IP:-192.168.10.203}:3001
    volumes:
      - ./billing-frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3001}:3000"
    depends_on:
      - backend
    networks:
      - billing-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: billing-nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    depends_on:
      - backend
      - frontend
    networks:
      - billing-network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_logs:
    driver: local
  nginx_logs:
    driver: local

networks:
  billing-network:
    driver: bridge

